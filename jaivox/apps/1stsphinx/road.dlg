
#include errors.dlg

{
[are_nn_jj]
	def ;
	are.NN.JJ ;
	(ask) ;
	def ;
}

{
[which_nn_jj]
	def ;
	which.NN.JJ ;
	(find) ;
	def ;
}

{
[what_else]
	def ;
	WP.ELS ;
	(find ELS) ;
	def ;
}

{
start
	fully.specified.question ;
	not.fully.specified.question ;
	confirmation ;
	command system ;
}

{
not.fully.specified.question
	any ELS ask.ELS ;
	WP.ELS find.ELS ;
	yes.continue yes.more ;
	no.continue no.more ;
}



{
fully.specified.question
	are.NN.JJ ;
	which.NN.JJ ;
}

{
are.NN.JJ
	are NNS JJ-N ;
	are NNS JJ-N at this time ;
	are the NNS JJ-N ;
	are the NNS JJ-N ;
	are there any JJ-P NNS ;
	do the NNS get JJ-N at this time ;
	do you think the NNS are JJ-N ;
	do you think NNP is JJ-N ;
	do you think NNP is JJ-P ;
	is NNP a JJ-P NN ;
	is NNP a JJS-P NN ;
	is NNP DT NN ;
	is NNP JJR-P ;
	is NNP JJR-N ;
}

{
which.NN.JJ
	which NN is JJ-P ;
	which NNS are JJ-P ;
	which NN is JJR-P than NNP ;
	which NN is JJS-P ;
	WP NN JJ-P ;
	WP NNS JJS-P ;
	WP is a JJ-P NN ;
	WP are the JJ-P NNS ;
	which NN is JJ-N ;
	which NNS are JJ-N ;
	which NN is JJR-N than NNP ;
	which NN is JJS-N ;
	WP NN JJ-N ;
	WP NNS JJS-N ;
	WP is a JJ-N NN ;
	WP are the JJ-N NNS ;
}

{
WP.ELS
	what other JJ-P NN ;
	any other JJ-P NN ;
	what other JJ-N NN ;
	any other JJ-N NN ;
	what other JJ-P NNS ;
	any other JJ-P NNS ;
	what other JJ-N NNS ;
	any other JJ-N NN ;
	what other JJ-P NN other than NNP ;
	any other JJ-P NN other than NNP ;
	what other JJ-N NN other than NNP ;
	any other JJ-N NN other than NNP ;
	what other JJ-P NN besides NNP ;
	any other JJ-P NN besides NNP ;
	what other JJ-N NN besides NNP ;
	any other JJ-N NN besides NNP ;
	what other NN is JJ-P ;
	what other NN is JJ-N ;
	what NN is JJR-P ;
	what NN is JJR-N ;
	what ELS ;
	anything ELS ;
}

{
ask.ELS
	(ask ELS) ;
}

{
find.ELS
	(find ELS) ;
}

{
(ask)
	(V0=0) intro noanswers ;
	(V0>0) intro yesanswers ;
}

{
(find)
	(V0=0) cantfind ;
	(V0=1) oneitem V1 ;
	(V0=2) twoitems V1 and V2 ;
	(V0>2) manyitems forinstance V1 ;
}

{
(ask ELS)
	(V0=0) intro noanswers ;
	(V0>0) intro yesanswers ;
}

{
(find ELS)
	(V0=0) cantfind ;
	(V0=1) oneitem V1 ;
	(V0=2) twoitems V1 and V2 ;
	(V0>2) manyitems forinstance V1 ;
}

{
intro
	i guess ;
	It looks like ;
	It seems like ;
	Apparently ;
}

{
yesanswers
	that is the case ;
	the answer is yes ;
	that is true ;
}

{
noanswers
	that is not the case ;
	the answer is no ;
	that is false ;
}

{
cantfind
	i cannot find an answer ;
	Seems that i could not find any ;
	Well it looks like nothing matched ;
}

{
oneitem
	that could be ;
	that one is, ;
}

{
twoitems
	there are two such, ;
	there are exactly two answers, ;
	two answers may fit, ;
	two solutions, ;
	there are two matches, ;
}

{
manyitems
	there are several solutions, ;
	there are many answers, ;
	many ways to answer this, ;
	there are quite a few solutions, ;
	there are several matches, ;
}

{
forinstance
	for example ;
	for instance ;
	such as ;
	as an example ;
	one of them is ;
	one such is ;
	one such example is ;
}

{
command
	list ;
	cat ;
}

{
system
	pc ;
	linux ;
}
